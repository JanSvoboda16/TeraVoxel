#pragma once
#include "MeshNode.h"

/**
* Generates different mesh shapes. 
* The returned meshNode does not contain
* any transformation in the top layer, so it can be transformed as needed.
*/
class MeshGenerator
{
private:

	static float hueToRGB(float p, float q, float t)
	{
		// computation generated by GPT 3.0
		if (t < 0.0f) t += 1.0f;
		if (t > 1.0f) t -= 1.0f;
		if (t < 1.0f / 6.0f) return p + (q - p) * 6.0f * t;
		if (t < 1.0f / 2.0f) return q;
		if (t < 2.0f / 3.0f) return p + (q - p) * (2.0f / 3.0f - t) * 6.0f;
		return p;
	}

public:

	static Vector4b SphereRainbowColor(float theta, float phi, uint8_t alpha);
	static std::shared_ptr<MeshNode> AxisCross(float axisLength, const Vector4b& color);
	static std::shared_ptr<MeshNode> Sphere(float radius, int numSegments, const std::function<Vector4b(float, float)>& colorProvider);
	static std::shared_ptr<MeshNode> Cube(float width, float height, float depth, const std::function<Vector4b(bool, bool, bool)>& colorProvider);
};

